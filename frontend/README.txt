# Gu√≠a de Integraci√≥n - Archivos JavaScript

## üìÅ Estructura de Archivos JavaScript

```
sistema-panol/
‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îú‚îÄ‚îÄ app.js              ‚Üê JavaScript compartido (YA INCLUIDO)
‚îÇ   ‚îú‚îÄ‚îÄ dashboard.js        ‚Üê Para index.html
‚îÇ   ‚îú‚îÄ‚îÄ talleres.js         ‚Üê Para talleres.html
‚îÇ   ‚îú‚îÄ‚îÄ alumnos.js          ‚Üê Para alumnos.html
‚îÇ   ‚îú‚îÄ‚îÄ inventario.js       ‚Üê Para inventario.html
‚îÇ   ‚îú‚îÄ‚îÄ cajas.js            ‚Üê Para cajas.html
‚îÇ   ‚îú‚îÄ‚îÄ prestamos.js        ‚Üê Para prestamos.html
‚îÇ   ‚îú‚îÄ‚îÄ revision.js         ‚Üê Para revision.html
‚îÇ   ‚îî‚îÄ‚îÄ reportes.js         ‚Üê Para reportes.html
```

---

## üîß C√ìMO AGREGAR LOS ARCHIVOS A CADA P√ÅGINA

### 1. **index.html** (Dashboard Principal)

Agregar **ANTES** de `</body>`:

```html
<script src="app.js"></script>
<script src="js/dashboard.js"></script>
```

**Funciones principales:**
- `cargarDashboard()` - Carga todas las m√©tricas
- `cargarMetricas()` - M√©tricas principales (cajas, pr√©stamos, items)
- `cargarResumenTalleres()` - Usa vista `v_resumen_talleres`
- `cargarPrestamosRecientes()` - √öltimos 5 pr√©stamos
- `cargarAlertas()` - Alertas del sistema
- Actualizaci√≥n autom√°tica cada 5 minutos

---

### 2. **talleres.html** (Gesti√≥n de Talleres y Cursos)

Agregar **ANTES** de `</body>`:

```html
<script src="app.js"></script>
<script src="js/talleres.js"></script>
```

**Funciones principales:**
- `cargarTalleres()` - Lista todos los talleres
- `guardarTaller(formData)` - Crear/actualizar taller
- `editarTaller(codigo)` - Editar taller existente
- `cargarCursos()` - Lista todos los cursos
- `guardarCurso(formData)` - Crear curso nuevo
- `crearGruposAutomaticos(curCodigo)` - Crea 10 grupos autom√°ticamente
- `cargarGrupos()` - Lista grupos de trabajo
- `guardarGrupo(formData)` - Crear grupo
- `verIntegrantesGrupo(grupoId)` - Ver alumnos del grupo

**Endpoints API usados:**
- `GET /talleres`
- `POST /talleres`
- `PUT /talleres/:codigo`
- `GET /cursos`
- `POST /cursos`
- `GET /grupos`
- `POST /grupos`
- `GET /grupos/:id/integrantes`

---

### 3. **alumnos.html** (Gesti√≥n de Alumnos)

Agregar **ANTES** de `</body>`:

```html
<script src="app.js"></script>
<script src="js/alumnos.js"></script>
```

**Funciones principales:**
- `cargarAlumnos()` - Lista todos los alumnos
- `guardarAlumno(formData)` - Crear/actualizar alumno con validaci√≥n de RUT
- `asignarAlumnoAGrupo(aluRut, gruId)` - Asigna alumno a grupo (tabla `integrantes_grupo`)
- `editarAlumno(rut)` - Editar alumno existente
- `cambiarEstadoAlumno(rut, estado)` - Cambiar entre ACTIVO/INACTIVO/EGRESADO
- `verHistorialAlumno(rut)` - Ver historial desde `historial_movimientos`
- `aplicarFiltros()` - Filtrar por taller, curso, estado
- Validaci√≥n autom√°tica de RUT chileno
- Formateo autom√°tico de RUT

**Endpoints API usados:**
- `GET /alumnos`
- `POST /alumnos`
- `PUT /alumnos/:rut`
- `PUT /alumnos/:rut/estado`
- `GET /alumnos/:rut/historial`
- `GET /cursos` (para select)
- `GET /cursos/:codigo/grupos` (para select de grupos)
- `POST /grupos/integrantes` (asignaci√≥n a grupo)

---

### 4. **inventario.html** (Gesti√≥n de Inventario)

Agregar **ANTES** de `</body>`:

```html
<script src="app.js"></script>
<script src="js/inventario.js"></script>
```

**Funciones principales:**
- `cargarInventario()` - Lista todos los items
- `guardarItem(formData)` - Crear item maestro + unidades individuales
- `verDetalleItem(codigo)` - Ver detalles completos del item
- `actualizarEstadoItem(invId, estado, obs)` - Usa `pkg_inventario.sp_actualizar_estado_item`
- `verHistorialItem(codigo)` - Historial del item
- `reportarHallazgo(codigo)` - Marcar item extraviado como encontrado
- `registrarItemFaltante(...)` - Usa `pkg_inventario.sp_registrar_item_faltante`
- `contarItemsDisponibles(codigo)` - Usa `pkg_inventario.fn_contar_items_disponibles`
- `aplicarFiltros()` - Filtrar por taller, estado, condici√≥n

**Endpoints API usados:**
- `GET /inventario`
- `POST /inventario` (crea item maestro)
- `POST /inventario/unidades` (crea unidades individuales)
- `GET /inventario/:codigo`
- `GET /inventario/:codigo/historial`
- `POST /inventario/actualizar-estado` (ejecuta package PL/SQL)
- `POST /inventario/registrar-faltante` (ejecuta package PL/SQL)
- `GET /inventario/:codigo/disponibles` (usa funci√≥n PL/SQL)
- `GET /categorias`
- `GET /tipos-item`

---

### 5. **cajas.html** (Gesti√≥n de Cajas de Herramientas)

Agregar **ANTES** de `</body>`:

```html
<script src="app.js"></script>
<script src="js/cajas.js"></script>
```

**Funciones principales:**
- `cargarCajas()` - Lista todas las cajas
- `guardarCaja(formData)` - Crear caja nueva
- `armarCajaConComposicion(cajaCodigo, taller)` - Arma caja seg√∫n `composicion_estandar`
- `buscarUnidadesDisponibles(itemCodigo, cantidad)` - Busca items disponibles
- `asignarItemACaja(cajaCodigo, invId)` - Inserta en `items_en_cajas`
- `verContenidoCaja(cajaCodigo)` - Ver items actuales de la caja
- `completarCaja(cajaCodigo)` - Completa items faltantes autom√°ticamente
- `verComposicionEstandar()` - Muestra composici√≥n est√°ndar por taller
- `verHistorialCaja(cajaCodigo)` - Historial de movimientos
- `aplicarFiltros()` - Filtrar por taller, estado, completitud

**Endpoints API usados:**
- `GET /cajas`
- `POST /cajas`
- `GET /cajas/:codigo/contenido`
- `GET /cajas/:codigo/historial`
- `POST /cajas/items` (asignar item a caja)
- `GET /composicion-estandar/:taller`
- `GET /inventario/:codigo/unidades-disponibles`

---

### 6. **prestamos.html** (Gesti√≥n de Pr√©stamos Anuales)

Agregar **ANTES** de `</body>`:

```html
<script src="app.js"></script>
<script src="js/prestamos.js"></script>
```

**Funciones principales:**
- `cargarPrestamos()` - Lista pr√©stamos por a√±o
- `registrarPrestamo(formData)` - **USA `pkg_gestion_prestamos.sp_asignar_caja_anual`**
- `verificarDisponibilidadCaja(cajaCodigo)` - Usa `pkg_gestion_prestamos.fn_caja_disponible`
- `verificarGrupoSinPrestamo(grupoId)` - Usa `pkg_gestion_prestamos.fn_grupo_tiene_prestamo`
- `verDetallePrestamo(id)` - Ver detalles completos
- `procesarDevolucion(id)` - Redirige a revision.html
- `cargarGruposSinPrestamo()` - Grupos que necesitan caja
- `cargarCajasDisponibles()` - Cajas disponibles por taller
- `aplicarFiltros()` - Filtrar por taller, estado, a√±o

**Endpoints API usados:**
- `GET /prestamos?anio=2025`
- `POST /prestamos/asignar-caja-anual` ‚Üê **Ejecuta Package PL/SQL**
- `GET /prestamos/:id`
- `GET /cajas/:codigo/disponible` (funci√≥n PL/SQL)
- `GET /grupos/:id/tiene-prestamo` (funci√≥n PL/SQL)
- `GET /grupos/sin-prestamo?anio=2025`
- `GET /cajas/disponibles?taller=ELEC`
- `GET /grupos/:id/integrantes`

**Package PL/SQL usado:**
```sql
pkg_gestion_prestamos.sp_asignar_caja_anual(
    p_grupo_id => :grupoId,
    p_caja_codigo => :cajaCodigo,
    p_docente_rut => :docenteRut,
    p_anio => :anio
)
```

---

### 7. **revision.html** (Revisi√≥n y Devoluci√≥n)

Agregar **ANTES** de `</body>`:

```html
<script src="app.js"></script>
<script src="js/revision.js"></script>
```

**Funciones principales:**
- `cargarRevision()` - Carga pr√©stamo seleccionado
- `cargarChecklistItems(cajaCodigo)` - Obtiene items de la caja
- `renderChecklist()` - Renderiza checklist interactivo
- `actualizarRevision()` - Actualiza contadores en tiempo real
- `finalizarDevolucion()` - Valida y muestra confirmaci√≥n
- `confirmarDevolucionFinal()` - **USA `pkg_gestion_prestamos.sp_devolver_caja`**
- `registrarItemProblematico(problema)` - Usa `pkg_inventario.sp_registrar_item_faltante`
- `guardarBorrador()` - Guarda progreso en localStorage
- `cargarBorrador(id)` - Restaura borrador guardado
- Auto-guardado cada 2 minutos

**Endpoints API usados:**
- `GET /prestamos/:id`
- `GET /grupos/:id/integrantes`
- `GET /cajas/:codigo/contenido`
- `POST /prestamos/devolver-caja` ‚Üê **Ejecuta Package PL/SQL**
- `POST /inventario/registrar-item-faltante` (package PL/SQL)

**Package PL/SQL usado:**
```sql
pkg_gestion_prestamos.sp_devolver_caja(
    p_prestamo_id => :prestamoId,
    p_docente_rut => :docenteRut,
    p_observaciones => :observaciones
)
```

---

### 8. **reportes.html** (Reportes y Estad√≠sticas)

Agregar **ANTES** de `</body>`:

```html
<script src="app.js"></script>
<script src="js/reportes.js"></script>
```

**Funciones principales:**
- `seleccionarReporte(tipo)` - Selecciona tipo de reporte
- `generarReporte()` - Genera el reporte seleccionado
- `generarReportePrestamos(...)` - Usa `pkg_gestion_prestamos.sp_reporte_prestamos_activos`
- `generarReporteInventario(...)` - Estado del inventario
- `generarReporteProblemas(...)` - Items problem√°ticos
- `generarReporteCumplimiento(...)` - Usa `fn_porcentaje_cumplimiento_grupo`
- `generarReporteEstadisticas(...)` - Usa `sp_estadisticas_taller`
- `generarReporteHistorial(...)` - Historial de movimientos
- `exportarPDF()` - Exportar a PDF
- `exportarExcel()` - Exportar a Excel
- `imprimirReporte()` - Imprimir

**Endpoints API usados:**
- `GET /reportes/prestamos?taller=&fecha_inicio=&fecha_fin=`
- `GET /reportes/inventario?taller=`
- `GET /reportes/items-problematicos?taller=&fecha_inicio=&fecha_fin=`
- `GET /reportes/cumplimiento?taller=` (usa funci√≥n PL/SQL)
- `GET /reportes/estadisticas?taller=` (usa procedimiento PL/SQL)
- `GET /reportes/historial?taller=&fecha_inicio=&fecha_fin=`

**Packages PL/SQL usados:**
```sql
-- Para reporte de pr√©stamos activos
pkg_gestion_prestamos.sp_reporte_prestamos_activos(p_taller_codigo)

-- Para estad√≠sticas por taller
sp_estadisticas_taller(p_taller_codigo)

-- Para cumplimiento de grupos
fn_porcentaje_cumplimiento_grupo(p_grupo_id)
```

---

## üîÑ Dependencias entre Archivos

```
Todas las p√°ginas ‚Üí app.js (SIEMPRE debe estar primero)
                     ‚Üì
         P√°gina espec√≠fica.js
```

---

## üìã Resumen de Integraci√≥n

### Orden de scripts en TODAS las p√°ginas:

```html
<!-- Antes de </body> -->
<script src="app.js"></script>          <!-- SIEMPRE PRIMERO -->
<script src="js/[pagina].js"></script>  <!-- Script espec√≠fico -->
</body>
```

### Ejemplo completo para **prestamos.html**:

```html
    <!-- Toast Notification -->
    <div id="toast" class="toast">
        <span id="toastMessage">Mensaje</span>
    </div>

    <!-- Scripts -->
    <script src="app.js"></script>
    <script src="js/prestamos.js"></script>
</body>
</html>
```

---

## ‚öôÔ∏è Configuraci√≥n de API

En **app.js**, actualizar la URL de la API:

```javascript
const appState = {
    currentUser: null,
    apiUrl: 'https://tu-servidor.com/api', // ‚Üê CAMBIAR AQU√ç
};
```

---

## üîë Funcionalidades Clave por Package PL/SQL

### **pkg_gestion_prestamos**
- ‚úÖ `sp_asignar_caja_anual` - Usado en **prestamos.js**
- ‚úÖ `sp_devolver_caja` - Usado en **revision.js**
- ‚úÖ `fn_caja_disponible` - Usado en **prestamos.js**
- ‚úÖ `fn_grupo_tiene_prestamo` - Usado en **prestamos.js**
- ‚úÖ `sp_reporte_prestamos_activos` - Usado en **reportes.js**
- ‚úÖ `fn_obtener_items_caja` - Puede usarse en **cajas.js**

### **pkg_inventario**
- ‚úÖ `sp_registrar_item_faltante` - Usado en **revision.js** e **inventario.js**
- ‚úÖ `sp_actualizar_estado_item` - Usado en **inventario.js**
- ‚úÖ `fn_contar_items_disponibles` - Usado en **inventario.js**
- ‚úÖ `fn_verificar_caja_completa` - Puede usarse en **cajas.js**

### **Funciones Independientes**
- ‚úÖ `fn_porcentaje_cumplimiento_grupo` - Usado en **reportes.js**
- ‚úÖ `sp_estadisticas_taller` - Usado en **reportes.js** y **dashboard.js**

---

## üéØ Pr√≥ximos Pasos

1. **Copiar todos los archivos .js** a la carpeta `/js/`
2. **Agregar los scripts** a cada p√°gina HTML seg√∫n la tabla arriba
3. **Configurar la API URL** en app.js
4. **Implementar los endpoints REST** en el backend
5. **Probar cada m√≥dulo** individualmente
6. **Verificar integraci√≥n** completa

---

## üìû Soporte

Si encuentras errores o necesitas ayuda:
- Revisar la consola del navegador (F12)
- Verificar que app.js est√© cargado primero
- Confirmar que los endpoints de API existan
- Validar que los packages PL/SQL est√©n compilados

---

**¬°Sistema completo y listo para integrar!** üöÄ